# This file contains the multiscale-specific topology handling from martinate


# Have to have constraints.itp for multiscale topologies to work
if [[ ! -e $GMXLIB/$ForceField.ff/constraints.itp && ! -e ./constraints.itp ]]
then
    # Generate from ffbonded.itp
    FFBON= $GMXLIB/$ForceField.ff/ffbonded.itp
    awk '/#define *gb_/{sub("gb_","gc_"); print $1, $2, $3}' "$FFBON" > constraints.itp 

    # Add specific constrainttypes:
    S_S='S      S       1    0.2040'
    NR_FE='NR     FE      1    0.1980'
    S_CR1='S      CR1     1    0.1830'
    LSED -i -e "/angletypes/s/^/[ constrainttypes ]\n${S_S}\n${NR_FE}\n${S_CR1}\n\n/" martini.itp
fi

# #include the constraintsfile in the master topology if it is not already
grep -q '#include *"constraints.itp"' $TOP || LSED -i '/#include *"martini.itp"/s/$/\n\n#include "constraints.itp"\n\n/' $TOP

for ((i=0,j=0; i<${#MOLECULES[@]}; i+=2,j++))
do
    if ${MS[$j]}
    then
        # Adapt the atomistic topology for multiscaling
        awk '/^\[ *bonds *\]/{print "#ifdef FLEXIBLE"; bonds=1} 
             sub("^ *"P,M) || 1
             bonds {
                 B[N++]=$0 
                 if ($0 ~ /^ *$/) {
                     print "#else\n[ constraints ]"
                     bonds=0
                     for (i=1; i<N-1; i++) {
                         if (split(B[i],Q)==3) 
                             printf "%5d %5d\n", Q[1], Q[2]
                         else {
                             sub(/2 *gb_/,"1 gc_",B[i])
                             print B[i]
                         }
                     }
                 print "#endif\n"
                 }
             }' P=${MOLECULES[$i]} M=${MARMOLS[$j]} ${MOLITP[$j]} > ${MARMOLS[$j]}_MS.itp

             # Add the virtual sites generated by martinize.py
             cat ${MARMOLS[$j]}.itp >> ${MARMOLS[$j]}_MS.itp

             # Update the moleculetype #include file in the master topology
             LSED -i -e '/^\(#include \+"\)'${MARMOLS[$j]}.itp'/s//\1'${MARMOLS[$j]}_MS.itp'/' $TOP
    fi
done


